Problem : Intersection of Two arrays with Duplicate Elements #GFG

Problem Link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/hashing-gfg-160/problem/intersection-of-two-arrays-with-duplicate-elements

Problem Statement : Given two integer arrays a[] and b[], you have to find the intersection of the two arrays. Intersection of two arrays is said to be elements that are common in both arrays. The intersection should not have duplicate elements and the result should contain items in any order.

Note: The driver code will sort the resulting array in increasing order before printing.

Examples:

Input: a[] = [1, 2, 1, 3, 1], b[] = [3, 1, 3, 4, 1]
Output: [1, 3]
Explanation: 1 and 3 are the only common elements and we need to print only one occurrence of common elements.


Input: a[] = [1, 1, 1], b[] = [1, 1, 1, 1, 1]
Output: [1]
Explanation: 1 is the only common element present in both the arrays.


Input: a[] = [1, 2, 3], b[] = [4, 5, 6]
Output: []
Explanation: No common element in both the arrays.


Constraints:
1 ≤ a.size(), b.size() ≤ 105
1 ≤ a[i], b[i] ≤ 105

/***********************************************************************************************/


Approches to solve : 

1. BruteForce : we can solve this problem using nested loop 
 but the issue with that code it will take too much time and our code will be larger
 in this for each itereation of array first we will search whole element of second array


TC : O(n⋅m)  // SC : O(min(n,m))

CODE BELOW
///////////////////////////

 
        
        int n = a.length;
        int m = b.length;
        HashSet<Integer> set = new HashSet<>();
        for(int i = 0; i<n; i++){
            for(int j = 0; j<m; j++){
                if(a[i] == b[j]){
                    set.add(a[i]);
                }
            }
        }
        ArrayList<Integer> al = new ArrayList<>(set);
        //al.add(set);
        return al;

   TC : O(N*M) and space : O(min(n,m))
/***********************************************************************************/


2. Optimal : we can solve this problem using Hashset

 1. Create a HashSet A and store all elements of first array in A HashSet
 2. Create a another HashSet to store common between both array 
  why use HashSet?   Coz it remove the duplicate element
 3. check if HashSet A contains the element of Second Array then add it into result Hash Set
 4. Convert Result HashSet into ArrayList and return 



TC : O(n+m)  // SC : O(n+min(n,m))

// CODE id below


// store element of array a[]
       Set<Integer> setA = new HashSet<>();
       // store the common element into set to remove duplicate
        Set<Integer> resultSet = new HashSet<>();
        
        // Add all elements of a to setA
        for (int num : a) {
            setA.add(num);
        }
        
        // Check elements of b in setA
        for (int num : b) {
            // if the setA contains element of arr[] b
            // then add it to resultSet
            if (setA.contains(num)) {
                resultSet.add(num); // add common element to result set
            }
        }
        
        // Convert the set into  list and return
        return new ArrayList<>(resultSet);
        
        // TC : O(n + m)  // SC : O(n+ min(n, m))
        

/*****************************************************************************************/

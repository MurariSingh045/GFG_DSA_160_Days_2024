Problem : Subarrays with sum K
Problem Link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/hashing-gfg-160/problem/subarrays-with-sum-k


Problem Statement : Given an unsorted array of integers, find the number of continuous subarrays having sum exactly equal to a given number k.

Examples:

Input: arr = [10, 2, -2, -20, 10], k = -10
Output: 3
Explaination: Subarrays: arr[0...3], arr[1...4], arr[3...4] have sum exactly equal to -10.


Input: arr = [9, 4, 20, 3, 10, 5], k = 33
Output: 2
Explaination: Subarrays: arr[0...2], arr[2...4] have sum exactly equal to 33.

Input: arr = [1, 3, 5], k = 0
Output: 0
Explaination: No subarray with 0 sum.

Constraints:

1 ≤ arr.size() ≤ 105
-103 ≤ arr[i] ≤ 103
-107 ≤ k ≤ 107

Company Tags
Microsoft


/**********************************************************************************************/

Aprroches to solve :

1. BRUTE FORCE : using nested(2) loop we can solve it

   steps
  1. create a count variable which store the count of subarray which sum == k
  2. run loop & check the current sum == k if it exist increment count
  3. return count 

///////////////////////// CODE BELOW

       // below code is also correct but its exceeding the time
    
        int n = arr.length;
        int cnt = 0; // store the count of subaarays which sum=k
        for(int i = 0; i<n; i++){
            int sum = 0; // to store current subarray sum
            for(int j = i; j<n; j++){
                sum += arr[j];
                if(sum == k) cnt++;  // increment count
            }
        }
        return cnt; // TC : O(N^2) // SC : O(1)

/*************************************************/

2. OPTIMAL : we can solve it using HashMap
  
  #steps:
 1. Create a count variable
 2. iterate each element and add it to current sum
 3. Create a prefixSum HashMap which will check if the (currsum-k) exist or not into the HashMap
 4. if the prefixSum exist then increment count variable by this frequency
 5. update the hashMAp to track how manytimes each current sum ocuur so far

///////////////////////////////

int n = arr.length;
     int cnt = 0; // store subarray count which (sum == k)
     int currsum = 0; // to store subarray sum
     HashMap<Integer , Integer> prefixSum = new HashMap<>();
     prefixSum.put(0 , 1); // to handle cases where prefix itself equal to k
     for(int num : arr){
         currsum += num; // store current subarray sum
         
         // check if the  prefixsum - currsum = k exists in map or not
         // if exist then increment count by this frequency
         if(prefixSum.containsKey(currsum -k)){
             cnt += prefixSum.get(currsum - k);
         }
         // update the fequency of current prefixSum in the map
         // track  how many times each currsum has occured

// why we use getOrDefault : If currentSum is not present, it defaults to 0.
//If it is present, it retrieves its current count and increments it by 1.
// it helps to remove null pointer exception
//Problem Without getOrDefault:
//If currentSum is not already in the map, calling prefixSumMap.get(currentSum) will return null.

         prefixSum.put(currsum , prefixSum.getOrDefault(currsum ,0) +1);
     }
    return cnt ;
    // TC : O(N)  // SC : O(N)

/*******************************************************************************************/

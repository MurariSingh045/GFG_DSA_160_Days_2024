Problem : Level order traversal
Problem link : https://www.geeksforgeeks.org/problems/level-order-traversal/1

Problem Statement : Given a root of a binary tree with n nodes, the task is to find its level order traversal. Level order traversal of a tree is breadth-first traversal for the tree.

Examples:

Input: root[] = [1, 2, 3]

Output: [[1], [2, 3]]
Input: root[] = [10, 20, 30, 40, 50]

Output: [[10], [20, 30], [40, 50]]
Input: root[] = [1, 3, 2, N, N, N, 4, 6, 5]

Output: [[1], [3, 2], [4], [6, 5]]

Constraints:

1 ≤ number of nodes ≤ 105
0 ≤ node->data ≤ 109
Company Tags
1.Flipkart 2.Morgan Stanley 3.Accolite 4.Amazon 5.Microsoft 6.Samsung 7.D-E-Shaw 8.Ola Cabs 9.Payu 10.Adobe 11.Cisco 12.Qualcomm

/************************************************************************************************************/

1.[Approach 1] Using Stack (Recursive) – O(n) Time and O(n) Space

/************************************************************************************************/

// Recursive Java program for level order traversal of Binary Tree
import java.util.ArrayList;
import java.util.List;

class Node {
    int data;
    Node left, right;

    // Constructor to initialize a new node
    Node(int value) {
        data = value;
        left = right = null;
    }
}

class GfG {
  
    // Helper function for recursive level order traversal
    static void levelOrderRec(Node root, int level, ArrayList<ArrayList<Integer>> res) {
        if (root == null) return;

        // Add a new level to the result if needed
        if (res.size() <= level) 
            res.add(new ArrayList<>());

        // Add current node's data to its corresponding level
        res.get(level).add(root.data);

        // Recur for left and right children
        levelOrderRec(root.left, level + 1, res);
        levelOrderRec(root.right, level + 1, res);
    }

    // Function to perform level order traversal
    static ArrayList<ArrayList<Integer>> levelOrder(Node root) {
        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        levelOrderRec(root, 0, res);
        return res;
    }

    public static void main(String[] args) {
        // Create binary tree
        //      1         
        //     / \       
        //    3   2      
        //          \   
        //           4 
        //          /  \
        //         6    5
        Node root = new Node(1);
        root.left = new Node(3);
        root.right = new Node(2);
        root.right.right = new Node(4);
        root.right.right.left = new Node(6);
        root.right.right.right = new Node(5);

        // Perform level order traversal
        ArrayList<ArrayList<Integer>> res = levelOrder(root);

        // Print the result
        for (ArrayList<Integer> level : res) {
            for (int data : level) {
                System.out.print(data + " ");
            }
        }
    }
}


/**********************************************************************************************************/

2.[Approach 2] Using Queue (Iterative) – O(n) Time and O(n) Space

////////////////////////////////////////////////////////////////////

// Java program for level order traversal of Binary Tree
// Using Queue
import java.util.*;

class Node {
    int data;
    Node left, right;

    // Constructor to initialize a new node
    Node(int value) {
        data = value;
        left = null;
        right = null;
    }
}

class GfG {
  
    // Iterative method to find height of Binary Tree
    static ArrayList<ArrayList<Integer>> levelOrder(Node root) {
        if (root == null)
            return new ArrayList<>();

        // Create an empty queue for level order traversal
        Queue<Node> q = new LinkedList<>();
        ArrayList<ArrayList<Integer>> res = new ArrayList<>();

        // Enqueue Root
        q.add(root);
        int currLevel = 0;

        while (!q.isEmpty()) {
            int len = q.size();
            res.add(new ArrayList<>());

            for (int i = 0; i < len; i++) {
                // Add front of queue and remove it from queue
                Node node = q.poll();
                res.get(currLevel).add(node.data);

                // Enqueue left child
                if (node.left != null)
                    q.add(node.left);

                // Enqueue right child
                if (node.right != null)
                    q.add(node.right);
            }
            currLevel++;
        }
        return res;
    }

    public static void main(String[] args) {
        // Create binary tree
        //      1         
        //     / \       
        //    3   2      
        //          \   
        //           4 
        //          /  \
        //         6    5
        Node root = new Node(1);
        root.left = new Node(3);
        root.right = new Node(2);
        root.right.right = new Node(4);
        root.right.right.left = new Node(6);
        root.right.right.right = new Node(5);

        // Perform level order traversal
        ArrayList<ArrayList<Integer>> res = levelOrder(root);

        // Print the result
        for (ArrayList<Integer> level : res)
            for (int data : level)
                System.out.print(data + " ");
    }
}


/***************************************************************************************************************/
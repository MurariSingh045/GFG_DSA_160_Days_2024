Problem : k-th Smallest in BST

Problem link :https://www.geeksforgeeks.org/problems/find-k-th-smallest-element-in-bst/1

Problem Statement : Given a BST and an integer k, the task is to find the kth smallest element in the BST. If there is no kth smallest element present then return -1.

Examples:

Input: root = [2, 1, 3], k = 2
    
Output: 2
Explanation: 2 is the 2nd smallest element in the BST.
Input: root = [2, 1, 3], k = 5
    
Output: -1
Explanation: There is no 5th smallest element in the BST as the size of BST is 3.
Input: root = [20, 8, 22, 4, 12, N, N, N, N, 10, 14], k = 3
     
Output: 10
Explanation: 10 is the 3rd smallest element in the BST.
Constraints:

1 <= number of nodes, k <= 105
1 <= node->data <= 105

Company Tags
1.Accolite 2.Amazon 3.Google

/**************************************************************************************************/

[Expected Approach] Using In-Order traversal – O(k) Time and O(h) Space

/////////////////////////////////////////////////////////////////////


    // Recursive function for inorder traversal of the tree 
    // and find its kth smallest value.
    // Returns -1 if value is not found.
    static int kthSmallestRecur(Node root, int[] cnt, int k) {
        if (root == null) return -1;
        
        // Process left subtree.
        int left = kthSmallestRecur(root.left, cnt, k);
        
        // If kth smallest is found in left 
        // subtree, then return it.
        if (left != -1) return left;
        
        // increment node count
        cnt[0]++;
        
        // If curr node is kth smallest,
        // return it.
        if (cnt[0] == k) return root.data;
        
        // Else process the right subtree
        // and return its value.
        int right = kthSmallestRecur(root.right, cnt, k);
        return right;
    }

    // Function to find kth smallest value in BST.
    static int kthSmallest(Node root, int k) {
        int[] cnt = {0};
        return kthSmallestRecur(root, cnt, k);
    }

/***********************************************************************************************************/

[Alternate Approach] Using Augmented Tree – O(h) Time and O(h) Space

/////////////////////////////////////////////////////////////////////

// Java program to find kth 
// smallest value in BST

class Node {
    int data;
    int lCount;
    Node left, right;

    Node(int x, int l) {
        data = x;
        lCount = l;
        left = null;
        right = null;
    }
}

class GfG {

    // Recursive function for inorder traversal of the tree  
    // and find its kth smallest value.
    // Returns -1 if value is not found.
    static int kthSmallestRecur(Node root, int[] k) {
        if (root == null) return -1;

        // Search left subtree
        if (k[0] < root.lCount + 1) {
            return kthSmallestRecur(root.left, k);
        }
        
        // return curr node 
        else if (k[0] == root.lCount + 1) {
            return root.data;
        }
        
        // decrement k by (lCount+1) and 
        // search right subtree
        else {
            k[0] = k[0] - (root.lCount + 1);
            return kthSmallestRecur(root.right, k);
        }
    }

    // Function to find kth smallest value in BST.
    static int kthSmallest(Node root, int k) {
        int[] kRef = {k};
        return kthSmallestRecur(root, kRef);
    }

    public static void main(String[] args) {

        // Binary search tree
        //      20
        //    /   \
        //   8     22
        //  / \
        // 4   12
        //    /  \
        //   10   14
        Node root = new Node(20, 5);
        root.left = new Node(8, 1);
        root.right = new Node(22, 0);
        root.left.left = new Node(4, 0);
        root.left.right = new Node(12, 1);
        root.left.right.left = new Node(10, 0);
        root.left.right.right = new Node(14, 0);
        int k = 3;

        System.out.println(kthSmallest(root, k));
    }
}

/************************************************************************************************/
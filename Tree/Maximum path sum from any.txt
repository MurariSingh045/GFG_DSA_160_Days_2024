Problem : Maximum path sum from any node

Problem link : https://www.geeksforgeeks.org/problems/maximum-path-sum-from-any-node/1

Problem Statement : Given a binary tree, the task is to find the maximum path sum. The path may start and end at any node in the tree.

Examples:

Input: root[] = [10, 2, 10, 20, 1, N, -25, N, N, N, N, 3, 4]
Output: 42
Explanation: 

Max path sum is represented using green colour nodes in the above binary tree.
Input: root[] = [-17, 11, 4, 20, -2, 10]
Output: 31
Explanation: 

Max path sum is represented using green colour nodes in the above binary tree.
Constraints:
1 ≤ number of nodes ≤ 103
-104 ≤ node->data ≤ 104

Company Tags
1.Flipkart 2.Google 3.Facebook


/*******************************************************************************************************/

1.we can solve this problem using recursion

Time Complexity: O(n), where n is the number of nodes in the Binary Tree.
Auxiliary Space: O(h), where h is the height of the tree.

//////////////////////////////////////////////////////////////////////////////////////////

class GfG {

    // Returns the maximum path sum in the subtree with the current node as an endpoint.
    // Also updates 'res' with the maximum path sum.
    static int maxPathSumUtil(Node root, int[] res) {
        // Base case: return 0 for a null node
        if (root == null) return 0;

        // Calculate maximum path sums for left and right subtrees
        int l = Math.max(0, maxPathSumUtil(root.left, res));
        int r = Math.max(0, maxPathSumUtil(root.right, res));

        // Update 'res' with the maximum path sum passing through the current node
        res[0] = Math.max(res[0], l + r + root.data);

        // Return the maximum path sum rooted at this node
        return root.data + Math.max(l, r);
    }

    // Returns maximum path sum in tree with given root
    static int maxPathSum(Node root) {
        int[] res = {root.data};

        // Compute maximum path sum and store it in 'res'
        maxPathSumUtil(root, res);

        return res[0];
    }


/*****************************************************************************************************/
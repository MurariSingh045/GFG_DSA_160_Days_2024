Problem : Check for BST

Problem link : https://www.geeksforgeeks.org/problems/check-for-bst/1

Problem Statement : Given the root of a binary tree. Check whether it is a BST or not.
Note: We are considering that BSTs can not contain duplicate Nodes.
A BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Examples:

Input: root = [2, 1, 3, N, N, N, 5]


Output: true 
Explanation: The left subtree of every node contains smaller keys and right subtree of every node contains greater keys. Hence, the tree is a BST.
Input: root = [2, N, 7, N, 6, N, 9] 



Output: false 
Explanation: Since the node to the right of node with key 7 has lesser key value, hence it is not a valid BST.
Input: root = [10, 5, 20, N, N, 9, 25]


Output: false
Explanation: The node with key 9 present in the right subtree has lesser key value than root node.
Constraints:
1 ≤ number of nodes ≤ 105
1 ≤ node->data ≤ 109

Company Tags
1.VMWare 2.Flipkart 3.Accolite 4.Amazon 5.Microsoft 6.OYO Rooms 7.Samsung 8.Snapdeal 9.FactSet 10.Hike 11.MakeMyTrip 12.Ola Cabs 13.Walmart 14.Goldman Sachs 15.MAQ Software 16.Adobe 17.Linkedin 18.Qualcomm 19.Boomerang Commerce 20.GreyOrange 21.Wooker

/************************************************************************************************************/

[Approach – 1] Using specified range of Min and Max Values – O(n) Time and O(h) Space

////////////////////////////////////////////////////////////////////////////////////

   // Helper function to check if a tree is BST within a given range
    static boolean isBSTUtil(Node node, int min, int max) {
        if (node == null) return true;

        // If the current node's data 
        // is not in the valid range, return false
        if (node.data < min || node.data > max) return false;

        // Recursively check the left and 
        // right subtrees with updated ranges
        return isBSTUtil(node.left, min, node.data - 1) &&
               isBSTUtil(node.right, node.data + 1, max);
    }

    // Function to check if the entire binary tree is a BST
    static boolean isBST(Node root) {
        return isBSTUtil(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }

/***********************************************************************************************************/

[Approach – 2] Using Inorder Traversal – O(n) Time and O(h) Space

////////////////////////////////////////////////////////////

 
    // Recursive Function for inorder traversal
    static boolean inorder(Node root, int[] prev) {
        if (root == null)
            return true;

        // Recursively check the left subtree
        if (!inorder(root.left, prev))
            return false;

        // Check the current node value against the previous value
        if (prev[0] >= root.data)
            return false;

        // Update the previous value to the current node's value
        prev[0] = root.data;

        // Recursively check the right subtree
        return inorder(root.right, prev);
    }

    // Function to check if the tree is a valid BST
    static boolean isBST(Node root) {
        int[] prev = {Integer.MIN_VALUE};
        return inorder(root, prev);
    }


/**********************************************************************************************************/

[Approach – 3] Using Morris Traversal – O(n) Time and O(1) Space

//////////////////////////////////////////////////////////

  // Function to check if the binary tree 
      // is a BST using Morris Traversal
    static boolean isBST(Node root) {
        Node curr = root;
        Node pre;
        int prevValue = Integer.MIN_VALUE;

        while (curr != null) {
            if (curr.left == null) {
              
                // Process curr node
                if (curr.data <= prevValue) {
                  
                    // Not in ascending order
                    return false;
                }
                prevValue = curr.data;
                curr = curr.right;
            } else {
              
                // Find the inorder predecessor of curr
                pre = curr.left;
                while (pre.right != null && pre.right != curr) {
                    pre = pre.right;
                }

                if (pre.right == null) {
                  
                    // Create a temporary thread to the curr node
                    pre.right = curr;
                    curr = curr.left;
                } else {
                  
                    // Remove the temporary thread
                    pre.right = null;

                    // Process the curr node
                    if (curr.data <= prevValue) {
                      
                        // Not in ascending order
                        return false;
                    }
                    prevValue = curr.data;
                    curr = curr.right;
                }
            }
        }

        return true;
    }


/***************************************************************************************************************/
Problem : Count Pairs whose sum is less than target

Problem link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/two-pointer-technique-gfg-160/problem/count-pairs-whose-sum-is-less-than-target

Problem Statement : Given an array arr[] and an integer target. You have to find the number of pairs in the array whose sum is strictly less than the target.

Examples:

Input: arr[] = [7, 2, 5, 3], target = 8
Output: 2
Explanation: There are 2 pairs with sum less than 8: (2, 5) and (2, 3). 


Input: arr[] = [5, 2, 3, 2, 4, 1], target = 5
Output: 4
Explanation: There are 4 pairs whose sum is less than 5: (2, 2), (2, 1), (3, 1) and (2, 1).

Input: arr[] = [2, 1, 8, 3, 4, 7, 6, 5], target = 7
Output: 6
Explanation: There are 6 pairs whose sum is less than 7: (2, 1), (2, 3), (2, 4), (1, 3), (1, 4) and (1, 5).

Constraints:
1 <= arr.size() <= 105
0 <= arr[i] <= 104
1 <= target <= 104


/****************************************************************************************************************/

APPROACHE TO SOLVE:

/**************************************************************************************/

1. Brute Force : we can solve this problem using nested loop


CODE BELOW
/////////////////////

// This is Brute Force approach
       // we can use brute force for the smaller inputs
        
        
        int n = arr.length;
        int cnt = 0 ; // count no of pairs whose sum < target
        for(int i = 0; i<n; i++){
            for(int j = i+1; j<n; j++){
                if(arr[i] + arr[j] < target){
                    cnt++;
                }
            }
        } 
        return cnt;  // TC : O(N^2) // SC : O(1)

/************************************************************************/


2. Optimal Approach : we can solve this problem using Two Pointer Approach

 Steps:
 1. Sort the Array
 2. create a counter variable to store count of pairs which store the ans
 3. create two pointers 1.left = 0 , 2. right = n-1
 4. run a while loop
 5. if the condition satisfy increment count = (right - left) Because the array is sorted, every element between arr[left+1] to arr[right] will also form a valid pair with arr[left].
 6. if condition will not satisfy decrement the right pointer


CODE BELOW
////////////////////////////////////////////////////////

Arrays.sort(arr); // sort the array
        int n = arr.length;
        int cnt = 0; // count no of pairs whose sum < target
        int left = 0 , right = n-1;
        while(left < right){
            if(arr[left] + arr[right] < target){
                
                // coz the array is sorted so every element from
                // arr[left+1] to arr[right] will also form valid pair
                // pair with arr[left]
                // it also eleminate unnecessary comparision
                cnt += (right - left);
                left++; // increment left
            }
            // if the condition will false we should decrement right
            else{
                right--;
            }
        }
        // return count
        return cnt;
        // TC : O(nlogN)   // SC : O(1)
        // we can use two pointer approach for large dataset
        

/************************************************************************************************************/

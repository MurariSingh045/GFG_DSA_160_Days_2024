Problem : Trapping Rain Water

Problem Link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/two-pointer-technique-gfg-160/problem/trapping-rain-water-1587115621

Problem statement : Given an array arr[] with non-negative integers representing the height of blocks. If the width of each block is 1, compute how much water can be trapped between the blocks during the rainy season. 

Examples:

Input: arr[] = [3, 0, 1, 0, 4, 0 2]
Output: 10
Explanation: Total water trapped = 0 + 3 + 2 + 3 + 0 + 2 + 0 = 10 units.

Input: arr[] = [3, 0, 2, 0, 4]
Output: 7
Explanation: Total water trapped = 0 + 3 + 1 + 3 + 0 = 7 units.

Input: arr[] = [1, 2, 3, 4]
Output: 0
Explanation: We cannot trap water as there is no height bound on both sides.

Input: arr[] = [2, 1, 5, 3, 1, 0, 4]
Output: 9
Explanation: Total water trapped = 0 + 1 + 0 + 1 + 3 + 4 + 0 = 9 units.

Constraints:
1 < arr.size() < 105
0 < arr[i] < 103

Company Tags
1.Flipkart  2.Amazon 3.Microsoft 4.Google 5.Goldman Sachs

/*********************************************************************************************************/

APPROACHES TO SOLVE

/**********************************************************************************

1. BruteForce : 

steps
1. edge case : if the no elements is present in the array (return 0) we can't trapped water
2: Calculate the Left Max Boundary
3: Calculate the Right Max Boundary
4: Calculate Trapped Water
  we can calculate water level using formula : waterlevel = Math.min(leftMaxboundary[i], rightMaxboundary[i])

The water level at a block depends on the smaller of the maximum heights on its left and right sides.

5. Calculate the water trapped above the block as waterlevel - arr[i].
If the block's height is less than the water level, it traps water equal to the difference.

Add the water trapped at the current block to trappedWater.

5. return water trapped


COMPLEXITY : Tc : O(N) for left maxBoundary + O(N) for right maxBoundary + O(N) for trapped water
   
TC : O(N)   // SC : O(N) coz we are calculating leftMaxboundary & rightMaxboundary


CODE BELOW
////////////////////////////////////

     int n = arr.length;
        // step 1. edge case 
        // if no water is trapped then return 0
        if(n == 0) return 0;
        
        // step2. calculate left max boundary of the array
        // coz water will trapped between boundary
        int leftMaxboundary[] = new int[n];
     // assume first element is leftmax & add them into leftMax[]
        leftMaxboundary[0] = arr[0];
        // run a loop to find Maximum left boundary in the array
        for(int i =1; i<n; i++){
          leftMaxboundary[i] = Math.max(leftMaxboundary[i-1] , arr[i]);
        }
        
        // step3. calculate right max boundary
        int rightMaxboundary[] = new int[n];
        // assume last element is our rightmax
        // and put it on the last of the righMax array
        rightMaxboundary[n-1] = arr[n-1];
        // run a loop to find maximum right of the array
        for(int i = n-2; i>=0; i--){
            rightMaxboundary[i] = Math.max(rightMaxboundary[i+1] , arr[i]);
        }
        
        // step3. calculate trapped water
        int trappedWater = 0;
        for(int i = 0; i<n; i++){
            // calculate water level = min(leftMaxbound , rightmaxbound)
            int waterlevel = Math.min(leftMaxboundary[i] , rightMaxboundary[i]);
            
            // trapped water = waterlevel - arr[i]
            trappedWater += waterlevel - arr[i];
        }
        return trappedWater; // TC : O(N) // SC : O(N)

/****************************************************************************************************/

Can we Optimize it?

2. Optimal : we can optimize this problem using Two pointer approach

     
  // here instead of using two arrays(leftMaxboundary & rightmaxboundary)
  //we can calculate trapped water dynamically using two pointer
  // left and right 
  // and two variables to store maximum boundary heights(leftmax , rightMax)

TC : O(N) and SC : O(1)

CODE BELOW
///////////////////////////////////////////////////////////////

  int n = arr.length; // size of the array
      // edge case
      if (n == 0) return 0; // no elements , no water trapped
      
      //step2. initialize two pointers
      int left = 0;// pointer for the left side
      int right = n-1; // pointer fo the right side
      
      // step3. initialize leftMaxBoundary & rightMaxBoundary
      // in which water will trapped otherwise we cannot trapped water
      int leftMaxboundary = 0;
      int rightMaxboundary = 0;
      int trappedWater = 0; // to store all trapped water
     
     // step4. run a while loop 
     while(left <= right){
         
         // if the arr[left] is lesse than arr[right]
         if(arr[left] <= arr[right]){
             // water is determined by left side
             // if the arr[left] is greater than leftMaxboundary
             // we can not trapped water
             // block is higher than leftmax block
            if(arr[left] >= leftMaxboundary){
                
                leftMaxboundary = arr[left]; // update left max
            }
            // if the arr[left] is lesser than leftMaxboundary
            // we can trapped the water using below formula
            // trapped Water = leftMaxboundary - arr[left]
            // here array[left] is heights of currentBlock
            // leftMaxboundary = height of maximum block which is on the left side
            else{
            trappedWater += leftMaxboundary - arr[left]; // trapped water
            }
            left++; // update left pointer
         }
         // if the arr[right] is greater than arr[left]
         // water is trapped by right side
         else{
             // if the arr[right] is greater than rightMaxboundary
             // we can not trapped water
             // coz block is higher than the rightmaxboundary block
             if(arr[right] >= rightMaxboundary){
                 rightMaxboundary = arr[right]; // update righMaxboundary
             }
             // if the arr[right] is lesser than rightMaxboundary
            // we can trapped the water using below formula
            // trapped Water = rightMaxboundary - arr[right]
            // here array[right] is heights of currentBlock
            // rightMaxboundary = height of maximum block which is on the right side
             else{
                 trappedWater += rightMaxboundary - arr[right];
             }
             right--; // decrease  right pointer
         }
     }
     
     return trappedWater;  // TC : O(N) // SC : O(1)
     
/***********************************************************************************************************/


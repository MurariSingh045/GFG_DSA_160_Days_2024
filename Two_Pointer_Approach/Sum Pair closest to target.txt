Problem : Sum Pair closest to target

Problem link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/two-pointer-technique-gfg-160/problem/pair-in-array-whose-sum-is-closest-to-x1124

Problem Statement : Given an array arr[] and a number target, find a pair of elements (a, b) in arr[], where a<=b whose sum is closest to target.
Note: Return the pair in sorted order and if there are multiple such pairs return the pair with maximum absolute difference. If no such pair exists return an empty array.

Examples:

Input: arr[] = [10, 30, 20, 5], target = 25
Output: [5, 20]
Explanation: As 5 + 20 = 25 is closest to 25.

Input: arr[] = [5, 2, 7, 1, 4], target = 10
Output: [2, 7]
Explanation: As (4, 7) and (2, 7) both are closest to 10, but absolute difference of (2, 7) is 5 and (4, 7) is 3. 
Hence, [2, 7] has maximum absolute difference and closest to target.
 
Input: arr[] = [10], target = 10
Output: []
Explanation: As the input array has only 1 element, return an empty array.

Constraints:
1 <= arr.size() <= 2*105
0 <= target<= 2*105
0 <= arr[i] <= 105

Company Tags
Ola Cabs

/*********************************************************************************************************/

APPROACHES TO SOLVE : 

1. Brute Force :   we can solve this problem using nested loop

TC : O(n^2) // SC : O(1)


CODE BELOW
//////////////////////////////////////////
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class BruteForceClosestPair {
    public static List<Integer> closestPair(int[] arr, int target) {
        int n = arr.length;
        if (n < 2) return new ArrayList<>(); // If array has less than 2 elements, return empty list.

        int closestDiff = Integer.MAX_VALUE; // Minimum difference from target.
        int maxAbsDiff = Integer.MIN_VALUE; // Maximum absolute difference.
        int[] pairArray = new int[2];

        // Brute Force: Check all pairs
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int sum = arr[i] + arr[j];
                int currDiff = Math.abs(sum - target); // Difference from target.
                int absDiff = Math.abs(arr[j] - arr[i]); // Absolute difference between elements.

                // Update the pair based on the conditions
                if (currDiff < closestDiff || (currDiff == closestDiff && absDiff > maxAbsDiff)) {
                    closestDiff = currDiff;
                    maxAbsDiff = absDiff;
                    pairArray[0] = arr[i];
                    pairArray[1] = arr[j];
                }
            }
        }

        // If no valid pair is found
        if (closestDiff == Integer.MAX_VALUE) {
            return new ArrayList<>();
        }

        // Return pair in sorted order
        Arrays.sort(pairArray);
        return List.of(pairArray[0], pairArray[1]);
    }

    public static void main(String[] args) {
        int[] arr1 = {10, 30, 20, 5};
        int target1 = 25;
        System.out.println(closestPair(arr1, target1)); // Output: [5, 20]

        int[] arr2 = {5, 2, 7, 1, 4};
        int target2 = 10;
        System.out.println(closestPair(arr2, target2)); // Output: [2, 7]

        int[] arr3 = {10};
        int target3 = 10;
        System.out.println(closestPair(arr3, target3)); // Output: []
    }
}


/*****************************************************************************/

2. Optimal Approach :  we can solve this problem using two pointer approach

Steps
1: Handle Edge Case
2: Initialize Variables
3: Sort the Array
4: Initialize Two Pointers
5: Traverse the Array with Two Pointers
6: Check Conditions to Update the Pair
7: Adjust Pointers
8: Return the Result


CODE BELOW
/////////////////////////////////////////////

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class GFG {
    public static List<Integer> closestPair(int[] arr, int target) {
        int n = arr.length;
        if (n < 2) return new ArrayList<>(); // Return an empty list if less than 2 elements

        Arrays.sort(arr); // Sort the array

        int left = 0, right = n - 1;
        int[] pairArray = new int[2];
        int closestDiff = Integer.MAX_VALUE; // Track minimum difference
        int maxAbsDiff = Integer.MIN_VALUE; // Track maximum absolute difference

        while (left < right) {
            int sum = arr[left] + arr[right];
            int currDiff = Math.abs(sum - target);
            int absDiff = Math.abs(arr[right] - arr[left]);

            if (currDiff < closestDiff || (currDiff == closestDiff && absDiff > maxAbsDiff)) {
                closestDiff = currDiff;
                maxAbsDiff = absDiff;
                pairArray[0] = arr[left];
                pairArray[1] = arr[right];
            }

            if (sum < target) {
                left++;
            } else {
                right--;
            }
        }

        return (closestDiff == Integer.MAX_VALUE) ? new ArrayList<>() : 
               List.of(pairArray[0], pairArray[1]);
    }

    public static void main(String[] args) {
        int[] arr1 = {10, 30, 20, 5};
        int target1 = 25;
        System.out.println(closestPair(arr1, target1)); // Output: [5, 20]
    }
}


// TC : O(nlogn) * O(N) == O(nlogn) // SC : O(1)

/******************************************************************************/
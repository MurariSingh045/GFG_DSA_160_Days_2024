Problem : Product array puzzle

Problem link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/prefix-sum-gfg-160/problem/product-array-puzzle4525

Problem Statement : Given an array, arr[] construct a product array, res[] where each element in res[i] is the product of all elements in arr[] except arr[i]. Return this resultant array, res[].
Note: Each element is res[] lies inside the 32-bit integer range.

Examples:

Input: arr[] = [10, 3, 5, 6, 2]
Output: [180, 600, 360, 300, 900]
Explanation: For i=0, res[i] = 3 * 5 * 6 * 2 is 180.
For i = 1, res[i] = 10 * 5 * 6 * 2 is 600.
For i = 2, res[i] = 10 * 3 * 6 * 2 is 360.
For i = 3, res[i] = 10 * 3 * 5 * 2 is 300.
For i = 4, res[i] = 10 * 3 * 5 * 6 is 900.

Input: arr[] = [12, 0]
Output: [0, 12]
Explanation: For i = 0, res[i] is 0.
For i = 1, res[i] is 12.

Constraints:
2 <= arr.size() <= 105
-100 <= arr[i] <= 100

Company Tags
1.Flipkart 2.Morgan 3.Stanley 4.Accolite 5.Amazon 6.Microsoft 7.D-E-Shaw 8.Intuit 9.Opera

/**************************************************************************************************/

APPROACHES TO SOLVE:

/************************************************************************************************/

1. BruteForce : we can solve this problem using nested loop

TC : O(N^2)  and Space : O(1)

CODE BELOW
/////////////////////////////////////////////

 // Brute Force Approach
        int n = arr.length; // size of the array
        // create a result array which will store the result valur
        int res[] = new int[n];
        for(int i = 0; i < n; i++){
            int mul = 1; // to store multiplication of each element of arr[j]
            for(int j = 0 ; j < n; j++){
                // if (i == j) means when i will be equal of j 
                // then we have to skip the element of that index.
                if(i == j) continue;
                // if (i != j) then we cal multiply each element and add 
                // them into mul variable
                else{
                  mul *= arr[j]; // multiply arr[j] and update mul
                }
            }
            // after calculating multiply we are adding it to resultant array 
            res[i] = mul;
        }
        return res;  // TC : O(N^2) // SC : O(N)

/*******************************************************************************************************/

2.Better Approach : we can solve this problem using PrefixProduct & SuffixProduct

 #TC : O(N)  // SC : O(N)

CODE BELOW
///////////////////////////////////////////////

  // Better Approach
        int n = arr.length;
        // create a resultant array which will store the result
        int res[] = new int[n];
        
        // create two array prefix & suffix array
        // which will store the value of prefixProduct and suffixProd
        int prefixProduct[] = new int[n];
        int suffixProduct[] = new int[n];
        
        // calculate value of prefix product
        prefixProduct[0] = 1;
        for(int i = 1; i<n; i++){
            prefixProduct[i] = arr[i-1]*prefixProduct[i-1];
        }
        
        // calculate value of suffix product for each index
        suffixProduct[n-1] = 1;
        for(int i = n-2; i >= 0; i--){
            suffixProduct[i] = arr[i+1] * suffixProduct[i+1];
        }
        
        // calculate the value of resultant indices
        for(int i = 0; i<n; i++){
            res[i] = prefixProduct[i]*suffixProduct[i];
        }
        
        return res;   // TC : O(N)  // SC : O(N)

********************************************************************************************************/

3. Optimal Approach : we can solve this problem without using extra space 

 TC : O(N)  // SC : O(1)

CODE BELOW
/////////////////////////////////////////

  int n = arr.length; // size of the array
      int zeros = 0 ; // it will count how many zeros are present
      int index = -1; // it store index of element 0's
      int prod = 1; // store product
      
      for(int i = 0 ; i < n; i++){
          
          // if the element of array is zero then
          if( arr[i] == 0){
              zeros++; // increment zero
              index = i;  // put current zero indices to index
          }
          // if the element is not zero then calculate the prod
          // of all non zero element
          else{
             prod *= arr[i]; 
          }
      }
      
      // create a result array to store the ans 
      int res[] = new int[n];
      
      // Arrays.fill(res , 0);
      
      // if no zero is found then product of all array elements 
      if(zeros == 0){
          for(int i = 0; i<n; i++){
              res[i] = prod/arr[i];
          }
      }
        // if 1 zero found set the product only for that zero index
        // because rest of the things will automatically become zero
        if( zeros == 1){
            res[index] = prod;
        }
        
        
        return res;
        
    

/**********************************************************************************************************/
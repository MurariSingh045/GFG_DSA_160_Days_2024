Problem : N-Queen Problem

Problem : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/recursion-and-backtracking-gfg-160/problem/n-queen-problem0315

Problem Statement : The n-queens puzzle is the problem of placing n queens on a (n × n) chessboard such that no two queens can attack each other. Note that two queens attack each other if they are placed on the same row, the same column, or the same diagonal.

Given an integer n, find all distinct solutions to the n-queens puzzle.
You can return your answer in any order but each solution should represent a distinct board configuration of the queen placements, where the solutions are represented as permutations of [1, 2, 3, ..., n]. In this representation, the number in the ith position denotes the row in which the queen is placed in the ith column.
For eg. below figure represents a chessboard [3 1 4 2].



Examples:

Input: n = 1
Output: [1]
Explaination: Only one queen can be placed in the single cell available.

Input: n = 4
Output: [[2 4 1 3 ] [3 1 4 2 ]]
Explaination: There are 2 possible solutions for n = 4.

Input: n = 2
Output: []
Explaination: There are no possible solutions for n = 2.

Constraints:
1 ≤ n ≤ 10

Company Tags
1.Accolite 2.Amazon 3.Microsoft 4.D-E-Shaw 5.Visa 6.MAQ Software 7.Amdocs 8.Twitter

/**************************************************************************************************/

1. [Naive Approach] By Generating all Permutations using Recursion

Time Complexity: O(n!*n), n! for generating all permutations and O(n) for validation of each permutation.
Auxiliary Space: O(n)

///////////////////////////////////////////////////////////////////////

//Java program to find all solution of N queen problem 
//using recursion
import java.util.ArrayList;

class GfG {

    // Check if placement is safe
    static boolean isSafe(ArrayList<Integer> board, 
                          int currRow, int currCol) {
      
        for(int i = 0; i < board.size(); i++) {
            int placedRow = board.get(i);
            int placedCol = i + 1;

            // Check diagonals
            if(Math.abs(placedRow - currRow) == 
               Math.abs(placedCol - currCol)) {
                return false; // Not safe
            }
        }
        return true; // Safe to place
    }

    // Recursive utility to solve
    static void nQueenUtil(int col, int n, 
                           ArrayList<Integer> board, 
                           ArrayList<ArrayList<Integer>> res, 
                           boolean[] visited) {

        // If all queens placed, add to res
        if(col > n) {
            res.add(new ArrayList<>(board));
            return;
        }

        // Try each row in column
        for(int row = 1; row <= n; row++) {

            // If row not used
            if(!visited[row]) {

                // Check safety
                if(isSafe(board, row, col)) {

                    // Mark row
                    visited[row] = true;

                    // Place queen
                    board.add(row);

                    // Recur for next column
                    nQueenUtil(col + 1, n, board, 
                              res, visited);

                    // Backtrack
                    board.remove(board.size()-1);
                    visited[row] = false;
                }
            }
        }
    }

    // Function to solve N-Queen
    static ArrayList<ArrayList<Integer>> nQueen(int n) {
        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        ArrayList<Integer> board = new ArrayList<>();
        boolean[] visited = new boolean[n +1];
        nQueenUtil(1, n, board, res, visited);
        return res;
    }

    public static void main(String[] args) {
        int n = 4;
        ArrayList<ArrayList<Integer>> res = nQueen(n);
      
        for(ArrayList<Integer> row : res) {
            System.out.print("[");
            for(int i = 0; i < row.size(); i++) {
              
                System.out.print(row.get(i));
                if(i != row.size()-1)
                      System.out.print(" ");
            }
            System.out.println("]");
        }
    }
}

/**************************************************************************************************/

2. [Expected Approach] Using Backtracking with Pruning

 Time complexity : O(n!) For generating all permutations.
Auxiliary Space : O(n)

////////////////////////////////////////////////////////////////

// Java program to find all solutions of the N-Queens problem
// using backtracking and pruning

import java.util.ArrayList;
import java.util.List;

class GfG {

    // Utility function for solving the N-Queens
    // problem using backtracking.
    static void nQueenUtil(int j, int n, ArrayList<Integer> board, boolean[] rows,
            boolean[] diag1, boolean[] diag2, ArrayList<ArrayList<Integer>> res) {

        if (j > n) {
            // A solution is found
            res.add(new ArrayList<>(board));
            return;
        }

        for (int i = 1; i <= n; ++i) {
            if (!rows[i] && !diag1[i + j] && !diag2[i - j + n]) {

                // Place queen
                rows[i] = diag1[i + j] = diag2[i - j + n] = true;
                board.add(i);

                // Recurse to the next column
                nQueenUtil(j + 1, n, board, rows, diag1, diag2, res);

                // Remove queen (backtrack)
                board.remove(board.size() - 1);
                rows[i] = diag1[i + j] = diag2[i - j + n] = false;
            }
        }
    }

    // Solves the N-Queens problem and returns
    // all valid configurations.
    static ArrayList<ArrayList<Integer>> nQueen(int n) {
        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        ArrayList<Integer> board = new ArrayList<>();

        // Rows occupied
        boolean[] rows = new boolean[n + 1];

        // Major diagonals (row + j) and Minor diagonals (row - col + n)
        boolean[] diag1 = new boolean[2 * n + 1];
        boolean[] diag2 = new boolean[2 * n + 1];

        // Start solving from the first column
        nQueenUtil(1, n, board, rows, diag1, diag2, res);
        return res;
    }

    public static void main(String[] args) {
        int n = 4;
        ArrayList<ArrayList<Integer>> res = nQueen(n);

        for (ArrayList<Integer> solution : res) {
            System.out.print("[");
            for (int i = 0; i < solution.size(); i++) {
                System.out.print(solution.get(i));
                if (i != solution.size() - 1) {
                    System.out.print(" ");
                }
            }
            System.out.println("]");
        }
    }
}

/****************************************************************************************************************/ 
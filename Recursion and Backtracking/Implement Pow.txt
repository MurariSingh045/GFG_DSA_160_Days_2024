Problem : Implement Pow

Problem link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/recursion-and-backtracking-gfg-160/problem/powx-n

Problem Statement : Implement the function power(b, e), which calculates b raised to the power of e (i.e. be).

Examples:

Input: b = 3.00000, e = 5
Output: 243.00000
Input: b = 0.55000, e = 3
Output: 0.16638
Input: b = -0.67000, e = -7
Output: -16.49971
Constraints:

-100.0 < b < 100.0
-109 <= e <= 109
Either b is not zero or e > 0.
-104 <= be <= 104

/**************************************************************************************************************/

1.[Naive Approach 1] Using Iteration – O(e) Time and O(1) Space

//////////////////////////////////////////////////////////////////

// Java program to calculate pow(b, e)
class GfG {

    // Naive iterative solution to calculate pow(b, e)
    static double power(double b, int e) {
        
        // Initialize result to 1
        double pow = 1;

        // Multiply b for e times
        for (int i = 0; i < Math.abs(e); i++) 
            pow = pow * b;

        if (e < 0)
            return 1 / pow;

        return pow;
    }

    public static void main(String[] args) {
        double b = 3.0;
        int e = 5;
        double res = power(b, e);
        System.out.println(res);
    }
}

/**********************************************************************************************************/

2.[Naive Approach 2] Using Recursion – O(e) Time and O(e) Space

//////////////////////////////////////////////////////////////////

// Java program to calculate pow(b, e)
class GfG {

    static double power(double b, int e) {
        
        // Base Case: pow(b, 0) = 1
        if (e == 0)
            return 1;
        
        if (e < 0)
            return 1 / power(b, -e);
        
        // For all other cases
        return b * power(b, e - 1);
    }

    public static void main(String[] args) {
        double b = 3.0;
        int e = 5;
        double res = power(b, e);
        System.out.println(res);
    }
}

/*********************************************************************************************/

3.[Expected Approach] Using Divide and Conquer – O(log e) Time and O(log e) Space

///////////////////////////////////////////////////////

// Java program to calculate pow(b, e)
public class Main {

    // Recursive function to calculate pow(b, e)
    static double power(double b, int e) {
        
        // Base Case: pow(b, 0) = 1
        if (e == 0)
            return 1;

        if (e < 0)
            return 1 / power(b, -e);

        double temp = power(b, e / 2);

        if (e % 2 == 0)
            return temp * temp;
        else
            return b * temp * temp;
    }

    public static void main(String[] args) {
        double b = 3.0;
        int e = 5;
        double res = power(b, e);
        System.out.println(res);
    }
}

/**************************************************************************************************/

4.Using Inbuilt Functions – O(log e) Time and O(1) Space

////////////////////////////////////////////////////////////

// Java program to calculate power 
// Using builtin methods

class GFG {
    static double power(double b, int e) {
        return Math.pow(b, e);
    }

    public static void main(String[] args) {
        double b = 3.0;
        int e = 5;
        System.out.println(power(b, e));
    }
}

/***************************************************************************************************/
Problem : Linked List Group Reverse

Problem link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/linked-list-gfg-160/problem/reverse-a-linked-list-in-groups-of-given-size

Problem Statement : Given the head a linked list, the task is to reverse every k node in the linked list. If the number of nodes is not a multiple of k then the left-out nodes in the end, should be considered as a group and must be reversed.

Examples:

Input: head = 1 -> 2 -> 2 -> 4 -> 5 -> 6 -> 7 -> 8, k = 4
Output: 4 -> 2 -> 2 -> 1 -> 8 -> 7 -> 6 -> 5

Explanation: The first 4 elements 1, 2, 2, 4 are reversed first and then the next 4 elements 5, 6, 7, 8. Hence, the resultant linked list is 4 -> 2 -> 2 -> 1 -> 8 -> 7 -> 6 -> 5.
Input: head = 1 -> 2 -> 3 -> 4 -> 5, k = 3
Output: 3 -> 2 -> 1 -> 5 -> 4

Explanation: The first 3 elements 1, 2, 3 are reversed first and then left out elements 4, 5 are reversed. Hence, the resultant linked list is 3 -> 2 -> 1 -> 5 -> 4.

Constraints:
1 <= size of linked list <= 105
1 <= data of nodes <= 106
1 <= k <= size of linked list 
Company Tags
1.Paytm 2.VMWare 3.Accolite 4.Amazon 5.Microsoft 6.Snapdeal 7.Hike 8.MakeMyTrip 9.Walmart 10.Goldman Sachs 11.Adobe 12.SAP Labs

/******************************************************************************************************/

APPROACHES TO SOLVE :

/*****************************************************************************************************/

1. BruteForce : we can solve this problem using iterative approach
  
  TC : O(N)  SC : O(1)

////////////////////////////////////////////////////////

// Java program to reverse a linked list
// in groups of given size

class Node {
    int data;
    Node next;

    Node(int x) {
        data = x;
        next = null;
    }
}

class GfG {
  
    // Function to reverse K groups
    static Node reverseKGroup(Node head, int k) {
        if (head == null) {
            return head;
        }

        Node curr = head;
        Node newHead = null;
        Node tail = null;

        while (curr != null) {
            Node groupHead = curr;
            Node prev = null;
            Node nextNode = null;
            int count = 0;

            // Reverse the nodes in the current group
            while (curr != null && count < k) {
                nextNode = curr.next;
                curr.next = prev;
                prev = curr;
                curr = nextNode;
                count++;
            }

            // If newHead is null, set it to the
            // last node of the first group
            if (newHead == null) {
                newHead = prev;
            }

            // Connect the previous group to the 
            // current reversed group
            if (tail != null) {
                tail.next = prev;
            }

            // Move tail to the end of the
              // reversed group
            tail = groupHead;
        }

        return newHead;
    }

    static void printList(Node head) {
        Node curr = head;
        while (curr != null) {
            System.out.print(curr.data + " ");
            curr = curr.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
      
        // Creating a sample singly linked list:
        // 1 -> 2 -> 3 -> 4 -> 5
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);
        head.next.next.next.next = new Node(5);

        head = reverseKGroup(head, 3);
        printList(head);
    }
}

/**********************************************************************************************************/

2. We can solve this problem using Stack 

  TC : O(N)  // SC : O(K)

/////////////////////////////////////////////////////

// Java program to reverse a linked list
// in groups of given size

import java.util.Stack;

class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

// Function to reverse the linked list in groups
class GfG {
    static Node reverseKGroup(Node head, int k) {
        if (head == null || k == 1) {
            return head;
        }

        Stack<Node> st = new Stack<>();
        Node curr = head;
        Node prev = null;

        while (curr != null) {

            // Terminate the loop when either 
              // current == null or count >= k
            int count = 0;
            while (curr != null && count < k) {
                st.push(curr);
                curr = curr.next;
                count++;
            }

            // Now pop the elements from the stack one by one
            while (!st.isEmpty()) {
              
                // If the final list has not been started yet
                if (prev == null) {
                    prev = st.pop();
                    head = prev;
                } else {
                    prev.next = st.pop();
                    prev = prev.next;
                }
            }
        }

        // Set the next pointer of the last node to null
        prev.next = null;

        return head;
    }

    static void printList(Node head) {
        Node curr = head;
        while (curr != null) {
            System.out.print(curr.data + " ");
            curr = curr.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
      
        // Creating a sample singly linked list:
        // 1 -> 2 -> 3 -> 4 -> 5 -> 6
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);
        head.next.next.next.next = new Node(5);
        head.next.next.next.next.next = new Node(6);

        head = reverseKGroup(head, 3);

        printList(head);
    }
}

/************************************************************************************************************/

3. we can solve this problem using Recursive Approach

  TC : O(N)   // SC : O(n/K)

///////////////////////////////////////////////////////////////////

// Java program to reverse a linked list
// in groups of given size

import java.util.Stack;

class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

// Function to reverse the linked list in groups
class GfG {
    static Node reverseKGroup(Node head, int k) {
        if (head == null || k == 1) {
            return head;
        }

        Stack<Node> st = new Stack<>();
        Node curr = head;
        Node prev = null;

        while (curr != null) {

            // Terminate the loop when either 
              // current == null or count >= k
            int count = 0;
            while (curr != null && count < k) {
                st.push(curr);
                curr = curr.next;
                count++;
            }

            // Now pop the elements from the stack one by one
            while (!st.isEmpty()) {
              
                // If the final list has not been started yet
                if (prev == null) {
                    prev = st.pop();
                    head = prev;
                } else {
                    prev.next = st.pop();
                    prev = prev.next;
                }
            }
        }

        // Set the next pointer of the last node to null
        prev.next = null;

        return head;
    }

    static void printList(Node head) {
        Node curr = head;
        while (curr != null) {
            System.out.print(curr.data + " ");
            curr = curr.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
      
        // Creating a sample singly linked list:
        // 1 -> 2 -> 3 -> 4 -> 5 -> 6
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);
        head.next.next.next.next = new Node(5);
        head.next.next.next.next.next = new Node(6);

        head = reverseKGroup(head, 3);

        printList(head);
    }
}

/**********************************************************************************************************/
Problem : Reverse a linked list

Problem link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/linked-list-gfg-160/problem/reverse-a-linked-list

Problem Statement : Given the head of a linked list, the task is to reverse this list and return the reversed head.

Examples:

Input: head: 1 -> 2 -> 3 -> 4 -> NULL
Output: head: 4 -> 3 -> 2 -> 1 -> NULL
Explanation:

Input: head: 2 -> 7 -> 10 -> 9 -> 8 -> NULL
Output: head: 8 -> 9 -> 10 -> 7 -> 2 -> NULL
Explanation:

Input: head: 2 -> NULL
Output: 2 -> NULL
Explanation:

Constraints:
1 <= number of nodes, data of nodes <= 105

Company Tags
1.Paytm 2.VMWare 3.Zoho 4.Accolite 5.Amazon 6.Microsoft 7.Samsung 8.Snapdeal 9.D-E-Shaw 10.MakeMyTrip 11.Teradata 12.Walmart 13.Goldman Sachs 14.Intuit 15.Adobe 16.SAP Labs 17.Tejas Network 18.Cisco 19.Qualcomm 20.Cognizant 21.Mahindra Comviva  22.IgniteWorld

/*********************************************************************************************************/

1 . BruteForce : we can solve it using iterative method

TC : O(N)  // SC : O(1)

CODE BELOW
//////////////////////////////

// Iterative Java program to reverse a linked list

class Node {
    int data;
    Node next;

    Node(int new_data) {
        data = new_data;
        next = null;
    }
}

// Given the head of a list, reverse the list and return the
// head of reversed list
class GfG {
     static Node reverseList(Node head) {
        
        // Initialize three pointers: curr, prev and next
        Node curr = head, prev = null, next;

        // Traverse all the nodes of Linked List
        while (curr != null) {
            
            // Store next
            next = curr.next;
            
            // Reverse current node's next pointer
            curr.next = prev;
            
            // Move pointers one position ahead
            prev = curr;
            curr = next;
        }
        
        // Return the head of reversed linked list
        return prev;
    }

    // This function prints the contents
    // of the linked list starting from the head
    static void printList(Node node) {
        while (node != null) {
            System.out.print(" " + node.data);
            node = node.next;
        }
    }

    public static void main(String[] args) {

        // Create a hard-coded linked list:
        // 1 -> 2 -> 3 -> 4 -> 5
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);
        head.next.next.next.next = new Node(5);

        System.out.print("Given Linked list:");
        printList(head);
        
        head = reverseList(head);

        System.out.print("\nReversed Linked List:");
        printList(head);
    }
}

/**********************************************************************************************************/

2. Better Approach 1 : we can solve it using recursion

TC : O(N)  SC : O(N)

Code Below
////////////////////////////////

// Recursive Java program to reverse a linked list

class Node {
    int data;
    Node next;

    Node(int new_data) {
        data = new_data;
        next = null;
    }
}

class GfG {
    // Given the head of a list, reverse the list 
    // and return the head of reversed list
    static Node reverseList(Node head) {

        // If we have reached last node or linked
        // list is empty, return head of linked list
        if (head == null || head.next == null)
            return head;

        // reverse the rest of linked list and put 
        // the first element at the end
        Node rest = reverseList(head.next);

        // Make the current head as last node of 
        // remaining linked list
        head.next.next = head;

        // Update next of current head to NULL
        head.next = null;

        // Return the reversed linked list
        return rest;
    }

    // This function prints the contents
    // of the linked list starting from the head
    static void printList(Node node) {
        while (node != null) {
            System.out.print(" " + node.data);
            node = node.next;
        }
    }

    public static void main(String[] args)
    {

        // Create a hard-coded linked list:
        // 1 -> 2 -> 3 -> 4 -> 5
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);
        head.next.next.next.next = new Node(5);

        System.out.print("Given Linked List:");
        printList(head);

        head = reverseList(head);

        System.out.print("\nReversed Linked List:");
        printList(head);
    }
}

/**********************************************************************************************************/

3. Better Aprpoach 3.  we can solve it using stack 

TC  : O(N)  SC : O(N)

CODE BELOW
//////////////////////////////////////

// Java program to reverse linked list using Stack

import java.util.Stack;

class Node {
    int data;
    Node next;

    Node(int new_data) {
        data = new_data;
        next = null;
    }
}

class GfG {
      
    // Function to reverse the linked list
    static Node reverseList(Node head) {
          
        // Create a stack to store the nodes
        Stack<Node> stack = new Stack<>();

        Node temp = head;

        // Push all nodes except the last node into stack
        while (temp != null) {
            stack.push(temp);
            temp = temp.next;
        }

        // Make the last node as new head of the linked list
        if (!stack.isEmpty()) {
            head = stack.pop();
            temp = head;

            // Pop all the nodes and append to the linked list
            while (!stack.isEmpty()) {
              
                // append the top value of stack in list
                temp.next = stack.pop();
                
                  // move to the next node in the list
                temp = temp.next;
            }

            // Update the next pointer of last node 
              // of stack to NULL
            temp.next = null;
        }

        return head;
    }

    // This function prints the contents 
    // of the linked list starting from the head
    static void printList(Node node) {
        while (node != null) {
            System.out.print(" " + node.data);
            node = node.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
          
        // Create a hard-coded linked list:
        // 1 -> 2 -> 3 -> 4 -> 5
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);
        head.next.next.next.next = new Node(5);

        System.out.print("Given Linked List:");
        printList(head);

        head = reverseList(head);

        System.out.print("\nReversed Linked List:");
        printList(head);
    }
}

/*************************************************************************************************************/